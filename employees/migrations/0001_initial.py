# Generated by Django 4.2.7 on 2025-07-02 23:23

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('code', models.CharField(max_length=10, unique=True, validators=[django.core.validators.RegexValidator(message='Department code must contain only uppercase letters and numbers', regex='^[A-Z0-9]+$')])),
                ('description', models.TextField(blank=True)),
                ('budget', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('manager', models.ForeignKey(blank=True, limit_choices_to={'role__in': ['hr_manager', 'hiring_manager', 'admin']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managed_departments', to=settings.AUTH_USER_MODEL)),
                ('parent_department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sub_departments', to='employees.department')),
            ],
            options={
                'verbose_name': 'Department',
                'verbose_name_plural': 'Departments',
                'db_table': 'departments',
            },
        ),
        migrations.CreateModel(
            name='EmployeeProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employee_id', models.CharField(max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message='Employee ID must start with EMP followed by at least 4 digits', regex='^EMP\\d{4,}$')])),
                ('job_title', models.CharField(max_length=100)),
                ('employment_status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('terminated', 'Terminated'), ('on_leave', 'On Leave'), ('probation', 'Probation')], default='active', max_length=20)),
                ('employment_type', models.CharField(choices=[('full_time', 'Full Time'), ('part_time', 'Part Time'), ('contract', 'Contract'), ('temporary', 'Temporary'), ('intern', 'Intern')], default='full_time', max_length=20)),
                ('hire_date', models.DateField()),
                ('termination_date', models.DateField(blank=True, null=True)),
                ('probation_end_date', models.DateField(blank=True, null=True)),
                ('salary', models.DecimalField(blank=True, decimal_places=2, help_text='Annual salary in base currency', max_digits=10, null=True)),
                ('hourly_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Hourly rate for part-time/contract employees', max_digits=8, null=True)),
                ('work_phone', models.CharField(blank=True, max_length=20)),
                ('work_location', models.CharField(blank=True, max_length=200)),
                ('emergency_contact_name', models.CharField(blank=True, max_length=100)),
                ('emergency_contact_phone', models.CharField(blank=True, max_length=20)),
                ('emergency_contact_relationship', models.CharField(blank=True, max_length=50)),
                ('skills', models.TextField(blank=True, help_text='Comma-separated list of skills')),
                ('certifications', models.TextField(blank=True, help_text='Professional certifications and qualifications')),
                ('education', models.TextField(blank=True, help_text='Educational background')),
                ('notes', models.TextField(blank=True, help_text='Internal HR notes')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='employees', to='employees.department')),
                ('manager', models.ForeignKey(blank=True, limit_choices_to={'role__in': ['hiring_manager', 'hr_manager', 'admin']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='direct_reports', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='employee_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Employee Profile',
                'verbose_name_plural': 'Employee Profiles',
                'db_table': 'employee_profiles',
            },
        ),
        migrations.CreateModel(
            name='TimeOffRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_type', models.CharField(choices=[('vacation', 'Vacation'), ('sick', 'Sick Leave'), ('personal', 'Personal Leave'), ('maternity', 'Maternity Leave'), ('paternity', 'Paternity Leave'), ('bereavement', 'Bereavement Leave'), ('jury_duty', 'Jury Duty'), ('other', 'Other')], max_length=20)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('total_days', models.PositiveIntegerField()),
                ('reason', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('approval_date', models.DateTimeField(blank=True, null=True)),
                ('denial_reason', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_time_off_requests', to=settings.AUTH_USER_MODEL)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='time_off_requests', to='employees.employeeprofile')),
            ],
            options={
                'verbose_name': 'Time Off Request',
                'verbose_name_plural': 'Time Off Requests',
                'db_table': 'time_off_requests',
                'indexes': [models.Index(fields=['employee', 'status'], name='time_off_re_employe_41a49c_idx'), models.Index(fields=['start_date', 'end_date'], name='time_off_re_start_d_7163eb_idx'), models.Index(fields=['status'], name='time_off_re_status_239373_idx')],
            },
        ),
        migrations.CreateModel(
            name='PerformanceReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('review_period_start', models.DateField()),
                ('review_period_end', models.DateField()),
                ('review_type', models.CharField(choices=[('annual', 'Annual Review'), ('quarterly', 'Quarterly Review'), ('probation', 'Probation Review'), ('project', 'Project Review'), ('exit', 'Exit Review')], default='annual', max_length=20)),
                ('overall_rating', models.CharField(blank=True, choices=[('outstanding', 'Outstanding'), ('exceeds', 'Exceeds Expectations'), ('meets', 'Meets Expectations'), ('below', 'Below Expectations'), ('unsatisfactory', 'Unsatisfactory')], max_length=20, null=True)),
                ('goals_achieved', models.TextField(blank=True)),
                ('areas_of_improvement', models.TextField(blank=True)),
                ('goals_next_period', models.TextField(blank=True)),
                ('additional_comments', models.TextField(blank=True)),
                ('employee_comments', models.TextField(blank=True)),
                ('is_final', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_reviews', to='employees.employeeprofile')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='conducted_reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Performance Review',
                'verbose_name_plural': 'Performance Reviews',
                'db_table': 'performance_reviews',
                'indexes': [models.Index(fields=['employee', 'review_period_end'], name='performance_employe_728cba_idx'), models.Index(fields=['review_type'], name='performance_review__52ec03_idx'), models.Index(fields=['is_final'], name='performance_is_fina_25bb3c_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='employeeprofile',
            index=models.Index(fields=['employee_id'], name='employee_pr_employe_df7e0f_idx'),
        ),
        migrations.AddIndex(
            model_name='employeeprofile',
            index=models.Index(fields=['department', 'is_active'], name='employee_pr_departm_bbeb8d_idx'),
        ),
        migrations.AddIndex(
            model_name='employeeprofile',
            index=models.Index(fields=['employment_status'], name='employee_pr_employm_13290b_idx'),
        ),
        migrations.AddIndex(
            model_name='employeeprofile',
            index=models.Index(fields=['hire_date'], name='employee_pr_hire_da_77aa6e_idx'),
        ),
        migrations.AddIndex(
            model_name='department',
            index=models.Index(fields=['name'], name='departments_name_c59a45_idx'),
        ),
        migrations.AddIndex(
            model_name='department',
            index=models.Index(fields=['code'], name='departments_code_9f933a_idx'),
        ),
        migrations.AddIndex(
            model_name='department',
            index=models.Index(fields=['is_active'], name='departments_is_acti_a777bd_idx'),
        ),
    ]
